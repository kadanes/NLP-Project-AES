# -*- coding: utf-8 -*-
"""preprocess.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ybm4wmQpQciYY-lLnWZa4wnv6gK4t3OK
"""
from requirements import *
from nltk.tokenize import regexp_tokenize
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize 

default_pattern =  r"""(?x)                  
                        (?:[A-Z]\.)+          
                        |\$?\d+(?:\.\d+)?%?    
                        |\w+(?:[-']\w+)* """

def prepare_data(data, start, data_length):
  #data_length = 20000

  essays = []
  age = []
  gender = []
  gender_label  = []
  age_label = []
  original_data = []

  for i in range(start, start+data_length):
    poster_gender = data[i]['gender']
    poster_age = int(data[i]['age'])
    post = data[i]['post']
    original_data.append(post)
    tokens = regexp_tokenize(post, default_pattern)

  #f_post = [w for w in tokens if not w in stop_words]

    essays.append(tokens)
    age.append(poster_age)
    gender.append(poster_gender)
    if poster_gender == 'male':
      gender_label.append(0)
    else:
      gender_label.append(1)
    if poster_age <= 15:
      age_label.append(0)
    elif poster_age > 15 and poster_age <= 25:
      age_label.append(1)
    elif poster_age > 25 and poster_age <= 35:
      age_label.append(2)
    elif poster_age > 35 and poster_age <= 50:
      age_label.append(3)
      
  return essays, gender_label, age_label, original_data

def prepare_test(data):
  essays = []
  for i in range(len(data)):
    if data[i] == []:
      continue
    tokens = regexp_tokenize(data[i], default_pattern)
    essays.append(tokens)
  return essays

def prepare_age(data, start, essays, age, original_data, age_label):
  data_length = 40000 #10000 

  for i in range(start, start+data_length):
    poster_age = int(data[i]['age'])
    post = data[i]['post']
    tokens = regexp_tokenize(post, default_pattern)

    if poster_age <= 12 or poster_age > 16: #13-16 inclusive
      continue
    essays.append(tokens)
    age.append(poster_age)
    original_data.append(post)
    if poster_age == 13 or poster_age == 14:
      age_label.append(1)
    elif poster_age == 15 or poster_age == 16:
      age_label.append(2)

  return essays, age, original_data, age_label

def prepare_test(essays):
  token_essays = []
  for i in range(len(essays)):
    post = essays[i]
    tokens = regexp_tokenize(post, default_pattern)
    token_essays.append(tokens)
  return token_essays
